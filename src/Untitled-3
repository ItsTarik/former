import { fromJS } from 'immutable';

const state = fromJS({
  member: 'hello former',
  nested: {
    a: 1,
    b: 2,
    c: {
      v: 55,
    },
  },
});

console.log(state);

console.log(state.get('member'));
console.log(state.set('member', 'e.target.value'));

const newState = state.set('member', 'hhhhh');

console.log(JSON.stringify(newState, null, 4));

const newNestedState = state.setIn(['nested', 'c', 'v'], 25).toJS();

console.log(newNestedState);


//Former//
import React, { Fragment } from 'react';
import WithController from './WithController';
import StatePreview from './StatePreview';
import HilightRender from './HilightRender';

let refs = [];

export const registerRef = (ref) => refs.push(ref);

const initialazeFormer = (props) => ({
  // refs: props.formerMembers.map(({ name }) => ({
  //   ref: React.createRef(),
  //   name,
  // })),
  formState: [],
});

export default class Former extends React.Component {
  constructor(props) {
    super(props);
    // console.log('constructor props', props);
    // this.state = {
    //   ...initialazeFormer(props),
    // };
    this.previewRef = {
      ref: React.createRef(),
      name: 'StatePreviw',
    };
  }

  componentDidMount() {
    console.log(
      '%c Former componentDidMount',
      'font-size: 25px; background: black; color: white; font-weight: bold; border: 5px solid black; border-radius: 20px;'
    );
    refs.forEach(({ ref, name }) => {
      console.log(
        `%c Former subscribe ${name} to ${this.previewRef.name}`,
        'fonr-size: 25px; background: lime;'
      );
      ref.current.subscribe(this.previewRef);
    });
  }

  getRefs = () => refs;

  // formerHandler = (i) => (event) => {
  //   console.log('***', this.state.refs[i].ref.current);
  //   this.state.refs[i].ref.current.handler(event.target.value);
  // };

  // renderFormMembers = (Components) =>
  //   Components.map((FormComponent, i) => {
  //     return (
  //       <FormComponent
  //         ref={this.state.refs[i]}
  //         handler={this.formerHandler(i)}
  //         key={i}
  //       />
  //     );
  //   });

  // componentDidMount() {
  //   this.getInitialFormState();
  // }

  renderFormMembers = (formerMembers) =>
    formerMembers
      .map(({ Component: MemberWithoutRef, state, stateKey }) =>
        React.forwardRef((props, ref) => {
          const Hocked = WithController(MemberWithoutRef);
          return (
            <Hocked state={state} {...props} stateKey={stateKey} ref={ref} />
          );
        })
      )
      .map((FormComponent, i) => {
        return (
          <FormComponent
            ref={this.state.refs[i].ref}
            // handler={this.formerHandler(i)}
            key={i}
          />
        );
      });

  // getInitialFormState = () => {
  //   const initialFormState = this.state.refs.reduce(
  //     (stateAcc, { current }) => [...stateAcc, current.state],
  //     []
  //   );

  //   this.setState({ formState: initialFormState, shouldRender: false });
  // };

  // reset = () => this.setState({ ...initialazeFormer(this.props) });

  // parseChildrenNodes = (children) => {
  //   const rootNodes = React.Children.toArray(children);
  //   // console.log('rootNodes', rootNodes);
  //   const formVDOM = rootNodes.reduce((dom, node, i) => {
  //     const Elm = node.type;
  //     console.log('node.props', node.props);
  //     if (node.props.children) {
  //       const res =
  //         typeof node.props.children === 'string'
  //           ? node.props.children
  //           : this.parseChildrenNodes(
  //               typeof node.props.children === 'function'
  //                 ? node.props.children('fff')
  //                 : node.props.children
  //             );
  //       return [
  //         ...dom,
  //         <Elm key={i} {...node.props}>
  //           {res}
  //         </Elm>,
  //       ];
  //     }
  //     return [...dom, <Elm key={i} {...node.props} />];
  //   }, []);
  //   return formVDOM;
  // };

  onSubmit = (handleSubmit) => (e) => {
    e.preventDefault();
    console.log(
      '%c handleSubmit',
      'font-size: 25px; background: black; color: white;'
    );
    const formState = [...refs].reduce(
      (acc, { ref, name }) => ({ ...acc, [name]: ref.current.state.member }),
      {}
    );

    if (true) this.reset();

    return handleSubmit(formState);
    // const formState = this.state.refs.reduce((stateAcc, { ref, name }) => {
    //   // console.log('ref', ref);
    //   return { ...stateAcc, [name]: ref.current.state };
    // }, {});
    // // console.log('formState', JSON.stringify(formState, null, 4));
    // this.props.onError('this is an error');
    // this.props.onSubmit(formState);
  };

  reset = () => {
    console.log('%c reset', 'font size: 35px; color: white; background: red;');
    refs.forEach((refObj) => {
      if (refObj.ref.current.state.canReset) {
        refObj.ref.current.setState({
          member: refObj.ref.current.props.defaultValue,
          canReset: false,
        });
      }
    });
    // this.forceUpdate();
  };

  render() {
    // console.log(
    //   'parseChildrenNodes',
    //   this.parseChildrenNodes(this.props.children)
    // );
    // const Comp = this.props.children.type;
    const { handleSubmit, ...rest } = this.props;
    return (
      <HilightRender>
        <StatePreview ref={this.previewRef.ref} />
        <form {...rest} onSubmit={this.onSubmit(handleSubmit)}>
          {this.props.children}
          <span>
            <input type="submit" value="submit" />
            <input type="button" value="clear" onClick={this.reset} />
          </span>
          {/* {this.parseChildrenNodes(this.props.children)} */}

          {/* <Comp value="ddddd" /> */}
          {/* {this.props.children} */}
          {
            // <form onSubmit={this.handleSubmit}ubmit={this.handleSubmit} className="former__wrapper">
            //   {this.renderFormMembers(this.props.formerMembers)}
            //   {this.props.children({ reset: this.reset })}
            // </form>
          }
        </form>
      </HilightRender>
    );
  }
}
